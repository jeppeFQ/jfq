[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Lorem ipsum odor amet, consectetuer adipiscing elit. Quam nullam pretium malesuada potenti commodo rutrum molestie tincidunt sodales. Risus nulla dui faucibus odio est phasellus tempus. Sollicitudin dapibus nunc ex congue nostra sapien velit. Praesent pellentesque vitae sociosqu orci magnis habitant maximus metus quisque. Velit tempus ad sodales hac; suspendisse suscipit.\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem. Himenaeos adipiscing ultrices ex; rutrum dignissim turpis. Libero sociosqu lacinia nibh; potenti elit viverra. Senectus fames fringilla praesent nascetur lacus lobortis dui tortor. Felis ridiculus lorem senectus convallis conubia nec phasellus nisi. Potenti sodales rhoncus et penatibus auctor morbi erat augue iaculis. Egestas dictumst phasellus class nec facilisis sapien lectus maximus iaculis. Quam nascetur fusce vivamus proin dolor; magna tempus curae."
  },
  {
    "objectID": "projects.html#DIREK",
    "href": "projects.html#DIREK",
    "title": "Projects",
    "section": "DIREK",
    "text": "DIREK\n\nDIREK\n\n2+2 \n\n[1] 4"
  },
  {
    "objectID": "projects.html#MNcontact",
    "href": "projects.html#MNcontact",
    "title": "Projects",
    "section": "MNcontact",
    "text": "MNcontact\n\nMNcontact\nLorem ipsum odor amet, consectetuer adipiscing elit. Quam nullam pretium malesuada potenti commodo rutrum molestie tincidunt sodales. Risus nulla dui faucibus odio est phasellus tempus. Sollicitudin dapibus nunc ex congue nostra sapien velit. Praesent pellentesque vitae sociosqu orci magnis habitant maximus metus quisque. Velit tempus ad sodales hac; suspendisse suscipit.\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem. Himenaeos adipiscing ultrices ex; rutrum dignissim turpis. Libero sociosqu lacinia nibh; potenti elit viverra. Senectus fames fringilla praesent nascetur lacus lobortis dui tortor. Felis ridiculus lorem senectus convallis conubia nec phasellus nisi. Potenti sodales rhoncus et penatibus auctor morbi erat augue iaculis. Egestas dictumst phasellus class nec facilisis sapien lectus maximus iaculis. Quam nascetur fusce vivamus proin dolor; magna tempus curae.\nFames vivamus ante fames velit sapien, bibendum magna habitasse laoreet. Lobortis eros metus dignissim taciti conubia ex. Semper mattis nam maecenas aliquam torquent tempus mus. Finibus diam natoque nam neque rhoncus suscipit. Imperdiet senectus porta cursus dui fames taciti vel? Est lorem nibh ut sem, bibendum vel malesuada orci. At sed rhoncus penatibus ultrices suspendisse.\nUt inceptos natoque lacus risus massa facilisis. Pretium imperdiet dictum fusce vehicula ac magnis sollicitudin suscipit vel. Ornare semper aliquam mollis tristique integer maximus eros. Phasellus ac fusce potenti sit eros in nulla duis vulputate. Vivamus nostra est mi consequat varius laoreet accumsan morbi. Lectus faucibus facilisi nunc pulvinar et faucibus ultricies cursus.\nMassa efficitur consequat augue non rutrum ut lobortis adipiscing nulla. Ornare euismod mi varius; mauris phasellus bibendum mus metus sagittis. Facilisi arcu a congue nascetur quam varius morbi. Luctus dictumst sapien rhoncus commodo facilisis maecenas ad. Efficitur sapien nibh ullamcorper at semper ridiculus suspendisse. Id aptent nullam semper leo magnis. Blandit diam hac pellentesque ex litora sagittis convallis ornare convallis. Semper convallis volutpat auctor taciti mi habitasse finibus nunc.\n\n\nMassa efficitur\nInteger habitant varius hendrerit torquent sodales. Fusce consectetur consectetur bibendum mattis justo aenean mauris nam sed. Potenti vel a; cubilia turpis porta faucibus donec. Luctus tempor feugiat elit ligula mollis. Efficitur risus consectetur tellus cras in scelerisque. Tincidunt faucibus convallis neque elit, potenti purus ac convallis. Luctus pharetra condimentum per vitae blandit eleifend ac condimentum. Arcu arcu ut ullamcorper class semper.\nHac magna eros fermentum vitae aliquet nisi mauris. Tortor id diam tortor magna nunc est nisi feugiat hac. Sit nunc cras duis primis sollicitudin aenean penatibus commodo. Porttitor netus facilisi per class lorem nibh. Finibus ultricies penatibus; mauris justo feugiat himenaeos sapien maximus. Facilisis habitasse nibh eu augue nisi tincidunt elit suspendisse. Nam molestie netus ex nullam in. Feugiat magna blandit quisque feugiat curabitur himenaeos convallis accumsan. Turpis aliquam quis dictumst quam; ultricies commodo consectetur."
  },
  {
    "objectID": "projects/mncontact.html",
    "href": "projects/mncontact.html",
    "title": "",
    "section": "",
    "text": "MNcontact\nLorem ipsum odor amet, consectetuer adipiscing elit. Quam nullam pretium malesuada potenti commodo rutrum molestie tincidunt sodales. Risus nulla dui faucibus odio est phasellus tempus. Sollicitudin dapibus nunc ex congue nostra sapien velit. Praesent pellentesque vitae sociosqu orci magnis habitant maximus metus quisque. Velit tempus ad sodales hac; suspendisse suscipit.\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem. Himenaeos adipiscing ultrices ex; rutrum dignissim turpis. Libero sociosqu lacinia nibh; potenti elit viverra. Senectus fames fringilla praesent nascetur lacus lobortis dui tortor. Felis ridiculus lorem senectus convallis conubia nec phasellus nisi. Potenti sodales rhoncus et penatibus auctor morbi erat augue iaculis. Egestas dictumst phasellus class nec facilisis sapien lectus maximus iaculis. Quam nascetur fusce vivamus proin dolor; magna tempus curae.\nFames vivamus ante fames velit sapien, bibendum magna habitasse laoreet. Lobortis eros metus dignissim taciti conubia ex. Semper mattis nam maecenas aliquam torquent tempus mus. Finibus diam natoque nam neque rhoncus suscipit. Imperdiet senectus porta cursus dui fames taciti vel? Est lorem nibh ut sem, bibendum vel malesuada orci. At sed rhoncus penatibus ultrices suspendisse.\nUt inceptos natoque lacus risus massa facilisis. Pretium imperdiet dictum fusce vehicula ac magnis sollicitudin suscipit vel. Ornare semper aliquam mollis tristique integer maximus eros. Phasellus ac fusce potenti sit eros in nulla duis vulputate. Vivamus nostra est mi consequat varius laoreet accumsan morbi. Lectus faucibus facilisi nunc pulvinar et faucibus ultricies cursus.\nMassa efficitur consequat augue non rutrum ut lobortis adipiscing nulla. Ornare euismod mi varius; mauris phasellus bibendum mus metus sagittis. Facilisi arcu a congue nascetur quam varius morbi. Luctus dictumst sapien rhoncus commodo facilisis maecenas ad. Efficitur sapien nibh ullamcorper at semper ridiculus suspendisse. Id aptent nullam semper leo magnis. Blandit diam hac pellentesque ex litora sagittis convallis ornare convallis. Semper convallis volutpat auctor taciti mi habitasse finibus nunc.\n\n\nMassa efficitur\nInteger habitant varius hendrerit torquent sodales. Fusce consectetur consectetur bibendum mattis justo aenean mauris nam sed. Potenti vel a; cubilia turpis porta faucibus donec. Luctus tempor feugiat elit ligula mollis. Efficitur risus consectetur tellus cras in scelerisque. Tincidunt faucibus convallis neque elit, potenti purus ac convallis. Luctus pharetra condimentum per vitae blandit eleifend ac condimentum. Arcu arcu ut ullamcorper class semper.\nHac magna eros fermentum vitae aliquet nisi mauris. Tortor id diam tortor magna nunc est nisi feugiat hac. Sit nunc cras duis primis sollicitudin aenean penatibus commodo. Porttitor netus facilisi per class lorem nibh. Finibus ultricies penatibus; mauris justo feugiat himenaeos sapien maximus. Facilisis habitasse nibh eu augue nisi tincidunt elit suspendisse. Nam molestie netus ex nullam in. Feugiat magna blandit quisque feugiat curabitur himenaeos convallis accumsan. Turpis aliquam quis dictumst quam; ultricies commodo consectetur."
  },
  {
    "objectID": "workshop/plaintext.html",
    "href": "workshop/plaintext.html",
    "title": "",
    "section": "",
    "text": "Plain text"
  },
  {
    "objectID": "workshop/regression.html",
    "href": "workshop/regression.html",
    "title": "",
    "section": "",
    "text": "Regression"
  },
  {
    "objectID": "workshop/decomposition.html",
    "href": "workshop/decomposition.html",
    "title": "",
    "section": "",
    "text": "Decomposition"
  },
  {
    "objectID": "workshop/git.html",
    "href": "workshop/git.html",
    "title": "",
    "section": "",
    "text": ".git and versioncontrol\nVersionkontrol er et system (software), der holder styr på ændringer af filer over tid, der gør det muligt at genskabe vores tidligere arbejde. Virker for (stort set) alle filer.\nPå større projekter—hvor flere er involveret—er det vigtigt at have kontrol over, hvem der foretager ændringer, hvilke ændringer der er blevet foretaget, og hvordan man kan rulle tilbage til tidligere versioner, hvis noget går galt.\nI et langsigtet perspektiv vil Git hjælpe dig med at holde et projekt organiseret, muliggøre (mere) effektivt samarbejde og sikre, at vi altid har en backup af dine fremskridt.\n\n\nGør dette …\n/projektarbejde\n└──/backup\n    ├── projekt_281024.docx\n    ├── projekt_311024.docx\n    ├── projekt_041224.docx\n    ├── projekt_final.docx\n    ├── projekt_final2.docx\n    ├── projekt_final3.docx\n    ├── projekt_final_final.docx\n    └── projekt_FINAL.docx\n\n… til dette\n/projektarbejde\n├── .git\n└── projekt.docx\n\n\n\nGit i praksis\nVersionsstyringsprocessen med afsæt i .git skelletet består af 3 stadier:\n\nWorking Directory: den mappe, hvor vi kørte git init. Alt der ændres her spores af Git, men det gemmes (committes) ikke automatisk . Arbejdsområdet er der hvor .git er gemt og indeholder vores faktiske filer og mapper, som vi ser og redigerer på din computer. Når vi redigerer en fil i vores projekt, bliver ændringen først gjort i arbejdsområdet. Filer, der arbejdes på, får tagget M (modified), som betyder at Git har registeret en ændring, men den er ikke blevet gemt i versionshistorikken endnu.\nStaging Area: De ændringer, som du ønsker registreret i næste commit bliver flyttet til et staging area med git add . (se ④ nedenfor). Det er ikke som sådan et “sted”, men et snarer et “tag” til de filer, som Git skal gemme. Ingen ændringer er blevet gemt endnu. Det tekniske navn er index, og Stating Area er ikke et “sted” på computeren men en fil i .git mappen, der noterer hvad der skal sendes til versionshistorikken i næste git commit (se ⑥ nedenfor) og er et mellemstadie mellem Working Directory og Repository.\n\nSe det som et kladdeområde, hvor du forbereder de ændringer, der skal indgå i en commit. Vi sender filer til Staging Area med: git add. Den primære funktion er at holde vores versionshistorik ren og logisk opdelt. Hvilket gør det lettere at spore ændringer og identificere bugs senere. For at se hvad der er modificeret og/eller staged bruger vi: git status (se &#9314 nedenfor).\n\nRepository: Når vi bruger kommandoen git commit -m \"besked\" gemmes alt staged data i vores Git-repository og alle ændringer siden sidste commit bliver en permanent del af projektets versionshistorik. Vores repository er commit-historikken, hvor hver commit repræsenterer en version af projektet på et bestemt tidspunkt. Når filer er committed er det sikkert gemt i vores lokale database. Vi sender filer til versionshistorikken med: git commit &lt;fil&gt; (se ⑥ nedenfor). Vi tilgår historikken med: git log (se ⑦ nedenfor).\n\n\n\nKommandoer\n\n1git config\n2git init\n3git status\n4git add\n5git diff\n6git commit\n7git log\n8git clone\n9git push\n10git pull\n11git remote\n\n\n1\n\nIndstilling af konfigurationsindstillinger (fx brugernavn og e-mail).\n\n2\n\nInitialiserer et nyt Git-repository i den aktuelle mappe. I skal være opmærksom på hvilken mappe I befinder jer i, når i kører git init.\n\n3\n\nViser status for ændringer i arbejdsområdet (fx hvilke filer der er ændret og klar til staging).\n\n4\n\nTilføjer filer til staging-området, så de er klar til næste commit.\n\n5\n\nViser forskelle mellem ændringer i filer, enten fra arbejdsområdet eller staging-området.\n\n6\n\nGemmer de ændringer, der er i staging-området, som en ny version i repository.\n\n7\n\nViser en log over commits i repository, ofte med detaljer som forfatter, dato og commit-besked.\n\n8\n\nHenter et eksisterende repository fra en ekstern kilde (fx GitHub) og opretter en lokal kopi.\n\n9\n\nSender lokale commits til et eksternt repository.\n\n10\n\nHenter og integrerer ændringer fra et eksternt repository til den lokale kopi.\n\n11\n\nAdministrerer forbindelser til eksterne repositories.\n\n\n\n\nI ① … ② Kommandoen skaber en ny undermappe (.git) og er “skelettet” for vores repository. Denne mappe indeholder alle Git’s interne data, der bruges til at spore og administrere versionshistorikken for dit projekt. ③ … ④ … ⑤ … ⑥ … ⑦ … ⑧ … ⑨ … ⑩ … ⑪ …\n\nsum(1, 5, 9)\n\n[1] 15"
  },
  {
    "objectID": "workshop/api.html",
    "href": "workshop/api.html",
    "title": "",
    "section": "",
    "text": "API’s"
  },
  {
    "objectID": "workshop.html",
    "href": "workshop.html",
    "title": "Workshops and teaching",
    "section": "",
    "text": "Lorem ipsum odor amet, consectetuer adipiscing elit. Quam nullam pretium malesuada potenti commodo rutrum molestie tincidunt sodales. Risus nulla dui faucibus odio est phasellus tempus. Sollicitudin dapibus nunc ex congue nostra sapien velit. Praesent pellentesque vitae sociosqu orci magnis habitant maximus metus quisque. Velit tempus ad sodales hac; suspendisse suscipit.\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem. Himenaeos adipiscing ultrices ex; rutrum dignissim turpis. Libero sociosqu lacinia nibh; potenti elit viverra. Senectus fames fringilla praesent nascetur lacus lobortis dui tortor. Felis ridiculus lorem senectus convallis conubia nec phasellus nisi. Potenti sodales rhoncus et penatibus auctor morbi erat augue iaculis. Egestas dictumst phasellus class nec facilisis sapien lectus maximus iaculis. Quam nascetur fusce vivamus proin dolor; magna tempus curae."
  },
  {
    "objectID": "workshop.html#descriptive",
    "href": "workshop.html#descriptive",
    "title": "Workshops and teaching",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem."
  },
  {
    "objectID": "workshop.html#regression",
    "href": "workshop.html#regression",
    "title": "Workshops and teaching",
    "section": "Regression",
    "text": "Regression\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108\n\n\n\n\nRegression"
  },
  {
    "objectID": "workshop.html#decomposition",
    "href": "workshop.html#decomposition",
    "title": "Workshops and teaching",
    "section": "Decomposition",
    "text": "Decomposition\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\nDecomposition"
  },
  {
    "objectID": "workshop.html#sna",
    "href": "workshop.html#sna",
    "title": "Workshops and teaching",
    "section": "SNA and VNA",
    "text": "SNA and VNA\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem."
  },
  {
    "objectID": "workshop.html#nb",
    "href": "workshop.html#nb",
    "title": "Workshops and teaching",
    "section": "Naive Bayes",
    "text": "Naive Bayes\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem."
  },
  {
    "objectID": "workshop.html#lda",
    "href": "workshop.html#lda",
    "title": "Workshops and teaching",
    "section": "LDA",
    "text": "LDA\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\n\n\nHi! I’m a side note …………………………………. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, !"
  },
  {
    "objectID": "workshop.html#cli",
    "href": "workshop.html#cli",
    "title": "Workshops and teaching",
    "section": "CommandLine and file organization [da]",
    "text": "CommandLine and file organization [da]\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\nTerminalen: interaktion med computeren (og filsystemet)\n\nTerminalen er det, der giver os adgang til kommandolinjegrænsefladen (CLI). Selvom den har miste meget af sin position blandt den gennemsnitlige computer-bruger—grundet grafiske brugergrænseflader (GUI)—er den fortsat en meget effektiv måde at interagere med computeren. Særligt på Unix-systemer.\nShell\nNår vi anvender CLI, bruger vi en shell, der er et program til fortolkning af kommandoer. De to mest almindelige shell-programmer er:\n\n\nBash (Bourne Again Shell): Standard på mange Linux-distributioner og tidligere på macOS.\n\nZsh (Z Shell): Standard på macOS fra og med version 10.15 Catalina.\nFilorganisering\n\nReferer til hvordan vores filer (data) og mapper (directories) er struktureret og lagret på vores lagringsenhed (harddisk, SSD, ekstern enhed, …).\nDenne struktur bestemmer hvordan data hentes og gemmes, og gør det muligt for brugeren eller programmer at finde, tilgå og anvende filer.\nEn mappe (directory) er en container, som indeholder filer og andre mapper, og danner grundlaget for en hierakisk struktur (tree-/træstruktur). Opbygningen er med afsæt i en root-mappe (ikke den egentlige root-mappe, men brugerens hjemmemappe), som indeholder undermapper og filer. Herfra indeholder hver undermappe andre undermapper og filer, hvilket danner et træ af mapper og filer, hvis vi zoomer ud. Med andre ord, (træ-)hierakiet giver en logisk og navigérbar organisering på computeren.\n\nroot directory: I Unix-systemer (MacOS, Linux) betegnes den /. I Windows er der en root-mappe i hvert drev, betegnet med bogstavet for drevet, fx C:\\\nUndermapper: Mapper, der findes inde i andre mapper, fx /home/user/documents eller C:\\Users\\Username\\Documents.\nEt filsystem\n\n\n\nUNIX (MacOS, Linux)\n/\n├── bin                  # Vigtige eksekverbare systemfiler\n├── sbin                 # Systemadministrative eksekverbare filer\n├── etc                  # Systemkonfigurationsfiler\n├── home                 # Brugermapper (personlige filer)\n│   └── jeppe            # Brugeren \"jeppe\"'s hjemmemappe\n│       ├── Documents    # jeppes dokumenter\n│       ├── Downloads    # jeppes downloadede filer\n│       ├── Music        # jeppes musikfiler\n│       ├── Pictures     # jeppes billeder\n│       ├── Videos       # jeppes videofiler\n│       └── Projects     # Personlige kodeprojekter og scripts\n│           └── snake_game\n│               ├── main.py # Python-kode til et snake-spil\n│               └── assets  # Grafikfiler til spillet\n├── root                 # Superbrugerens hjemmemappe\n├── usr                  # Bruger- og systemprogrammer\n│   ├── bin              # Programmer installeret til brugere\n│   ├── lib              # Systemets biblioteker\n│   └── local            # Lokalt installerede programmer\n├── var                  # Variable data som logs og mails\n│   ├── log              # Systemets logfiler\n│   └── tmp              # Midlertidige filer\n├── tmp                  # Midlertidige filer (slettes ved genstart)\n├── dev                  # Systemets enheder som harddiske og terminaler\n├── mnt                  # Monteringspunkt for midlertidige enheder\n│   └── usb-drive        # En USB-nøgle monteret her\n└── media                # Monteringspunkt for eksterne enheder\n    └── jeppe-usb        # jeppes eksterne harddisk hvis monteret\n\n\n\nWindows\nC:\\\n├── Program Files            # Programmer installeret for alle brugere\n├── Program Files (x86)      # 32-bit versioner (på 64-bit systemer)\n├── Users                    # Brugermapper (til hver bruger på systemet)\n│   └── jeppe                # Brugeren \"jeppe\"'s hjemmemappe\n│       ├── Documents        # jeppes dokumenter\n│       ├── Downloads        # jeppes downloadede filer\n│       ├── Music            # jeppes musikfiler\n│       ├── Pictures         # jeppes billeder\n│       ├── Videos           # jeppes videofiler\n│       ├── Desktop          # Filer og genveje på jeppes skrivebord\n│       ├── AppData          # jeppes personlige app-data og indstillinger\n│       └── Projects         # Personlige kodeprojekter og scripts\n│           └── snake_game\n│               ├── main.py  # Python-kode til et snake-spil\n│               └── assets   # Grafikfiler til spillet\n├── Windows                  # Operativsystemets filer\n│   ├── System32             # Vigtige systemfiler \n│   └── Temp                 # Midlertidige filer, der bruges af systemet\n├── ProgramData              # Data, der deles af applikationer på systemet\n└── Temp                     # Midlertidige filer\n\n\n\n\nNavigation: Absolutte og relative stier\n\nAbsolut sti: En sti, der beskriver placeringen af en fil eller mappe i forhold til root-mappen. Fx /home/user/documents/projekt.docs eller C:\\Users\\Username\\Documents\\projekt.docx.\nRelativ sti: En sti, der beskriver placeringen af en fil eller mappe i forhold til den nuværende mappe. Hvis vi er i mappen /home/user, kan vi nøjes med den relative sti documents/projekt.docx for at henvise til filen.\n\n\n1ls\n     ls -l\n     ls -a\n\n2cd\n     cd ..\n     cd ~\n     cd -\n\n3touch filnavn.type\n\n4mkdir ny-mappe\n\n5rm filnavn.type\n\n6rm -r ny-mappe\n\n\n1\n\nLister filer og mapper i den aktuelle mappe. ls -l lister filer og mapper med detaljer (fx rettigheder, størrelse). ls -a viser alle filer, inklusiv skjulte filer.\n\n2\n\nSkifter til en anden mappe. cd .. går én mappe op (til forældermappen). cd ~ går til brugerens hjemmemappe. cd - skifter tilbage til den seneste mappe, du var i.\n\n3\n\nOpretter en ny, tom fil med angivet navn og type.\n\n4\n\nOpretter en ny mappe med det angivne navn.\n\n5\n\nSletter en fil med det angivne navn.\n\n6\n\nSletter en mappe og alt indholdet i den rekursivt."
  },
  {
    "objectID": "workshop.html#git",
    "href": "workshop.html#git",
    "title": "Workshops and teaching",
    "section": "Git [da]",
    "text": "Git [da]\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\n\n.git and versioncontrol\nFor installation, se …\nVersionkontrol er et system (software), der holder styr på ændringer af filer over tid, der gør det muligt at genskabe vores tidligere arbejde. Virker for (stort set) alle filer.\nPå større projekter—hvor flere er involveret—er det vigtigt at have kontrol over, hvem der foretager ændringer, hvilke ændringer der er blevet foretaget, og hvordan man kan rulle tilbage til tidligere versioner, hvis noget går galt.\nI et langsigtet perspektiv vil Git hjælpe dig med at holde et projekt organiseret, muliggøre (mere) effektivt samarbejde og sikre, at vi altid har en backup af dine fremskridt.\n\n\nGør dette …\n/projektarbejde\n└──/backup\n    ├── projekt_281024.docx\n    ├── projekt_311024.docx\n    ├── projekt_041224.docx\n    ├── projekt_final.docx\n    ├── projekt_final2.docx\n    ├── projekt_final3.docx\n    ├── projekt_final_final.docx\n    └── projekt_FINAL.docx\n\n… til dette\n/projektarbejde\n├── .git\n└── projekt.docx\n\n\nGit i praksis\nVersionsstyringsprocessen med afsæt i .git skelletet består af 3 stadier:\n\nWorking Directory: den mappe, hvor vi kørte git init. Alt der ændres her spores af Git, men det gemmes (committes) ikke automatisk . Arbejdsområdet er der hvor .git er gemt og indeholder vores faktiske filer og mapper, som vi ser og redigerer på din computer. Når vi redigerer en fil i vores projekt, bliver ændringen først gjort i arbejdsområdet. Filer, der arbejdes på, får tagget M (modified), som betyder at Git har registeret en ændring, men den er ikke blevet gemt i versionshistorikken endnu.\nStaging Area: De ændringer, som du ønsker registreret i næste commit bliver flyttet til et staging area med git add . (se ④ nedenfor). Det er ikke som sådan et “sted”, men et snarer et “tag” til de filer, som Git skal gemme. Ingen ændringer er blevet gemt endnu. Det tekniske navn er index, og Stating Area er ikke et “sted” på computeren men en fil i .git mappen, der noterer hvad der skal sendes til versionshistorikken i næste git commit (se ⑥ nedenfor) og er et mellemstadie mellem Working Directory og Repository. Se det som et kladdeområde, hvor du forbereder de ændringer, der skal indgå i en commit. Vi sender filer til Staging Area med: git add. Den primære funktion er at holde vores versionshistorik ren og logisk opdelt. Hvilket gør det lettere at spore ændringer og identificere bugs senere. For at se hvad der er modificeret og/eller staged bruger vi: git status (se &#9314 nedenfor).\nRepository: Når vi bruger kommandoen git commit -m \"besked\" gemmes alt staged data i vores Git-repository og alle ændringer siden sidste commit bliver en permanent del af projektets versionshistorik. Vores repository er commit-historikken, hvor hver commit repræsenterer en version af projektet på et bestemt tidspunkt. Når filer er committed er det sikkert gemt i vores lokale database. Vi sender filer til versionshistorikken med: git commit &lt;fil&gt; (se ⑥ nedenfor). Vi tilgår historikken med: git log (se ⑦ nedenfor).\nBranching\nHver commit repræsenterer et punkt i projektets branch, og du kan navigere frem og tilbage i projektets historie efter behov.\nEn branch i Git repræsenterer en uafhængig udviklingslinje. Vi kan lave ændringer i denne branch uden at påvirke andre branches. Vi kan droppe en branch, hvis ideer var dårlig, eller merge den med vores primære branch, hvis det virkede. (Teknisk relaterer alt dette sig til HEAD-pointeren).\n“This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.” (REF)\nEt sikkert workflow\n\n\nIsolering: Hver branch er isoleret fra andre branches, hvilket betyder, at ændringer i én branch ikke påvirker arbejdet i andre branches.\n\nSamarbejde: Udviklere kan arbejde på separate branches uden at forstyrre hinandens arbejde. Git gør det muligt at flette branches sammen, når arbejdet er færdigt.\n\nEksperimentering: Branches gør det nemt at eksperimentere med nye ideer uden risiko. Hvis noget går galt, kan du altid slette branch’en og vende tilbage til en stabil version.\nTilgå versionshistorikken og genskab tidligere stadie\ngit log\ngit checkout &lt;commit-id&gt;\nKommandoer\n\n1git config\n2git init\n3git status\n4git add\n5git diff\n6git commit\n7git log\n8git clone\n9git push\n10git pull\n11git remote\n\n\n1\n\nIndstilling af konfigurationsindstillinger (fx brugernavn og e-mail).\n\n2\n\nInitialiserer et nyt Git-repository i den aktuelle mappe. I skal være opmærksom på hvilken mappe I befinder jer i, når i kører git init.\n\n3\n\nViser status for ændringer i arbejdsområdet (fx hvilke filer der er ændret og klar til staging).\n\n4\n\nTilføjer filer til staging-området, så de er klar til næste commit.\n\n5\n\nViser forskelle mellem ændringer i filer, enten fra arbejdsområdet eller staging-området.\n\n6\n\nGemmer de ændringer, der er i staging-området, som en ny version i repository.\n\n7\n\nViser en log over commits i repository, ofte med detaljer som forfatter, dato og commit-besked.\n\n8\n\nHenter et eksisterende repository fra en ekstern kilde (fx GitHub) og opretter en lokal kopi.\n\n9\n\nSender lokale commits til et eksternt repository.\n\n10\n\nHenter og integrerer ændringer fra et eksternt repository til den lokale kopi.\n\n11\n\nAdministrerer forbindelser til eksterne repositories.\n\n\n\n\nI ① … ② Kommandoen skaber en ny undermappe (.git) og er “skelettet” for vores repository. Denne mappe indeholder alle Git’s interne data, der bruges til at spore og administrere versionshistorikken for dit projekt. ③ … ④ … ⑤ … ⑥ … ⑦ … ⑧ … ⑨ … ⑩ … ⑪ …\nLokalt repository\nDet lokale repository, er det ligger på vores lokalecomputer (.git mappen).\nFjern repository\nGrundlæggende fungerer et fjernrepositoryet som et centralt lager på en server, som flere udviklere kan samarbejde om. Disser servere er typisk hostet på platforme som GitHub eller GitLab.\nEt fjernrepositoty kan klones (se ⑧ ovenfor) til vores lokale computer, således vi har en lokal kopi af projektet. Herefter kan vi pull’e og push’e ændringer:\n\n\nPull: Henter ændringer fra fjernrepository’et til dit lokale repository.\n\nPush: Skubber ændringer fra dit lokale repository til fjernrepository’et.\nDistribueret versionskontrol\nGit er et distribueret versionskontrolsystem, hvilket betyder, at hver udvikler har en fuld kopi af hele repositoryet (inklusive historik og branches) på deres egen computer.\nØvelse"
  },
  {
    "objectID": "workshop.html#plaintext",
    "href": "workshop.html#plaintext",
    "title": "Workshops and teaching",
    "section": "Plain text",
    "text": "Plain text\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\nPlain text"
  },
  {
    "objectID": "workshop.html#api",
    "href": "workshop.html#api",
    "title": "Workshops and teaching",
    "section": "API’s",
    "text": "API’s\nFaucibus accumsan ipsum et tempor fringilla placerat nisl ultrices. Suscipit dignissim finibus platea efficitur inceptos consequat orci sem.\nAPI’s"
  },
  {
    "objectID": "projects/direk.html",
    "href": "projects/direk.html",
    "title": "",
    "section": "",
    "text": "DIREK\n\n2+2 \n\n[1] 4"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jeppe Fjeldgaard Qvist",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Welcome",
    "section": "",
    "text": "About this site…\n\n1 + 1\n\n[1] 2"
  }
]