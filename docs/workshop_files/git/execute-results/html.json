{
  "hash": "e4da109c0f72a53b17d6ed4b72a550b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ncode-annotations: hover\n---\n\n\n### `.git` and versioncontrol \n\nFor installation, se ... \n\nVersionkontrol er et system (*software*), der holder styr på ændringer af filer **over tid**, der gør det muligt at **genskabe** vores tidligere arbejde. Virker for (stort set) alle filer.\n\nPå større projekter---hvor flere er involveret---er det vigtigt at have kontrol over, hvem der foretager ændringer, hvilke ændringer der er blevet foretaget, og hvordan man kan rulle tilbage til tidligere versioner, hvis noget går galt.\n\nI et *langsigtet perspektiv* vil Git hjælpe dig med at holde et projekt organiseret, muliggøre (mere) effektivt samarbejde og sikre, at vi altid har en backup af dine fremskridt.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n**Gør dette ...**\n\n```\n/projektarbejde\n└──/backup\n    ├── projekt_281024.docx\n    ├── projekt_311024.docx\n    ├── projekt_041224.docx\n    ├── projekt_final.docx\n    ├── projekt_final2.docx\n    ├── projekt_final3.docx\n    ├── projekt_final_final.docx\n    └── projekt_FINAL.docx\n```\n:::\n\n::: {.column width=\"50%\"}\n\n**... til dette**\n\n```\n/projektarbejde\n├── .git\n└── projekt.docx\n```\n:::\n\n::::\n\n#### Git i praksis \n\n**Versionsstyrings*processen*** med afsæt i `.git` skelletet består af 3 stadier: \n\n1. <u>***Working Directory***</u>: den mappe, hvor vi kørte `git init`. Alt der ændres her spores af Git, *men det gemmes (**committes**) ikke automatisk* . Arbejdsområdet er der hvor `.git` er gemt og indeholder vores faktiske filer og mapper, som vi ser og redigerer på din computer. Når vi redigerer en fil i vores projekt, bliver ændringen først gjort i arbejdsområdet. Filer, der arbejdes på, får tagget `M` (modified), som betyder at Git har registeret en ændring, men den er ikke blevet gemt i versionshistorikken endnu. \n\n2. <u>***Staging Area***</u>: De ændringer, som du ønsker registreret i næste **commit** bliver flyttet til et *staging area* med `git add .` (se &#9315; nedenfor). Det er ikke som sådan et \"sted\", men et snarer et \"tag\" til de filer, som Git skal gemme. *Ingen ændringer er blevet gemt endnu*. Det tekniske navn er `index`, og *Stating Area* er ikke et \"sted\" på computeren men en fil i `.git` mappen, der noterer hvad der skal sendes til versionshistorikken i næste `git commit` (se &#9317; nedenfor) og er et mellemstadie mellem **Working Directory** og **Repository**. Se det som et kladdeområde, hvor du forbereder de ændringer, der skal indgå i en commit. Vi sender filer til Staging Area med:  `git add`. Den primære funktion er at holde vores versionshistorik ren og logisk opdelt. Hvilket gør det lettere at spore ændringer og identificere bugs senere. For at se hvad der er *modificeret* og/eller *staged* bruger vi: `git status` (se &#9314 nedenfor). \n\n3. <u>***Repository***</u>: Når vi bruger kommandoen `git commit -m \"besked\"` gemmes alt *staged* data i vores Git-repository og alle ændringer siden **sidste commit** bliver en permanent del af projektets versionshistorik. Vores repository er commit-historikken, hvor hver commit repræsenterer en version af projektet  på et bestemt tidspunkt. Når filer er committed er det sikkert gemt i vores lokale database.  Vi sender filer til versionshistorikken med: `git commit <fil>` (se &#9317; nedenfor). Vi tilgår historikken med: `git log` (se &#9318; nedenfor).\n\n#### Branching\n\nHver `commit` repræsenterer et punkt i projektets `branch`, og du kan navigere frem og tilbage i projektets historie efter behov.\n\nEn `branch` i Git repræsenterer en **uafhængig udviklingslinje**. Vi kan lave ændringer i denne branch uden at påvirke andre branches. Vi kan **droppe en branch**, hvis ideer var dårlig, eller **merge den med vores primære branch**, hvis det virkede. (Teknisk relaterer alt dette sig til `HEAD`-pointeren).  \n\n*\"This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.\"* (REF)\n\n##### Et sikkert workflow\n\n- **Isolering**: Hver branch er isoleret fra andre branches, hvilket betyder, at ændringer i én branch ikke påvirker arbejdet i andre branches.\n- **Samarbejde**: Udviklere kan arbejde på separate branches uden at forstyrre hinandens arbejde. Git gør det muligt at flette branches sammen, når arbejdet er færdigt.\n- **Eksperimentering**: Branches gør det nemt at eksperimentere med nye ideer uden risiko. Hvis noget går galt, kan du altid slette branch'en og vende tilbage til en stabil version.   \n\n##### Tilgå versionshistorikken og genskab tidligere stadie\n\n```\ngit log\ngit checkout <commit-id>\n```\n\n### Kommandoer \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit config # <1>\ngit init # <2>\ngit status # <3>\ngit add # <4>\ngit diff # <5>\ngit commit # <6>\ngit log # <7>\ngit clone # <8>\ngit push # <9>\ngit pull # <10>\ngit remote # <11>\n```\n:::\n\n\n1. Indstilling af konfigurationsindstillinger (fx brugernavn og e-mail).\n2. Initialiserer et nyt Git-repository i den aktuelle mappe. I skal være opmærksom på hvilken mappe I befinder jer i, når i kører `git init`. \n3. Viser status for ændringer i arbejdsområdet (fx hvilke filer der er ændret og klar til staging).\n4. Tilføjer filer til staging-området, så de er klar til næste commit.\n5. Viser forskelle mellem ændringer i filer, enten fra arbejdsområdet eller staging-området.\n6. Gemmer de ændringer, der er i staging-området, som en ny version i repository.\n7. Viser en log over commits i repository, ofte med detaljer som forfatter, dato og commit-besked.\n8. Henter et eksisterende repository fra en ekstern kilde (fx GitHub) og opretter en lokal kopi.\n9. Sender lokale commits til et eksternt repository.\n10. Henter og integrerer ændringer fra et eksternt repository til den lokale kopi.\n11. Administrerer forbindelser til eksterne repositories. \n\n\nI &#9312; ... \n&#9313; Kommandoen skaber en ny undermappe (`.git`) og er \"skelettet\" for vores **repository**. Denne mappe indeholder alle Git’s interne data, der bruges til at spore og administrere versionshistorikken for dit projekt.\n&#9314; ... \n&#9315; ... \n&#9316; ... \n&#9317; ... \n&#9318; ... \n&#9319; ... \n&#9320; ... \n&#9321; ... \n&#9322; ...\n\n\n\n#### Lokalt repository \n\nDet lokale repository, er det ligger på vores lokalecomputer (`.git` mappen). \n\n#### Fjern repository\n\nGrundlæggende fungerer et fjernrepositoryet som et centralt lager på en server, som flere udviklere kan samarbejde om. Disser servere er typisk hostet på platforme som GitHub eller GitLab.\n\nEt fjernrepositoty kan `klones` (se &#9319; ovenfor) til vores lokale computer, således vi har en lokal kopi af projektet. Herefter kan vi pull'e og push'e ændringer:\n\n- `Pull`: Henter ændringer fra fjernrepository'et til dit lokale repository.\n- `Push`: Skubber ændringer fra dit lokale repository til fjernrepository'et.\n\n#### Distribueret versionskontrol \n\nGit er et *distribueret* versionskontrolsystem, hvilket betyder, at hver udvikler har en fuld kopi af hele repositoryet (inklusive historik og branches) på deres egen computer.\n\n### Øvelse",
    "supporting": [
      "git_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}